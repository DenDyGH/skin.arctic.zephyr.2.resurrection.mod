<?xml version="1.0" encoding="UTF-8"?>
<!-- Foundation -->
<includes>

    <include file="Defaults.xml" />

    <include file="Includes_View_50_List.xml" />
    <include file="Includes_View_51_Wall.xml" />
    <include file="Includes_View_52_Showcase.xml" />
    <include file="Includes_View_53_Poster.xml" />
    <include file="Includes_View_54_AEL.xml" />
    <include file="Includes_Info.xml" />
    <include file="Includes_Home.xml" />
    <include file="Includes_DialogVideoInfo.xml" />
    <include file="Includes_DialogMusicInfo.xml" />

    <include file="Includes_Animations.xml" />
    <include file="Includes_Defs.xml" />
    <include file="Includes_Dialog.xml" />
    <include file="Includes_Global.xml" />
    <include file="Includes_Items.xml" />
    <include file="Includes_Images.xml" />
    <include file="Includes_Labels.xml" />
    <include file="Includes_Object.xml" />
    <include file="Includes_Variable_Object.xml" />
    <include file="Includes_OSD.xml" />
    <include file="Includes_Topbar.xml" />
    <include file="Includes_VideoLyrics.xml" />
    <include file="Includes_Weather.xml" />
    <include file="Includes_AEL.xml" />
    <include file="Includes_PVRWidgets.xml" />

    <include file="Includes_View.xml" />

    <include file="script-skinshortcuts-includes.xml"/>

    <include file="Constants_Main.xml" />

    <!-- Highlight Color -->
    <variable name="ColorHighlight">
        <value>$INFO[Skin.String(focuscolor.name)]</value>
    </variable>

    <!-- Gradient Color -->
    <variable name="ColorGradient">
        <value>$INFO[Skin.String(gradientcolor.name)]</value>
    </variable>

    <!-- Invert Text Color -->
    <variable name="ColorSelected">
        <value condition="Skin.HasSetting(InvertTextColor)">ff333333</value>
        <value>Selected</value>
    </variable>
    <variable name="ColorSelected_100">
        <value condition="[[String.IsEqual(Skin.String(PosterHighlight),Mix) | String.IsEqual(Skin.String(PosterHighlight),White) | String.IsEmpty(Skin.String(PosterHighlight))] + !Skin.HasSetting(InvertTextColor)] | [String.IsEqual(Skin.String(PosterHighlight),Highlight) + Skin.HasSetting(InvertTextColor)]">main_bg_100</value>
        <value condition="[[String.IsEqual(Skin.String(PosterHighlight),Mix) | String.IsEqual(Skin.String(PosterHighlight),White)] + Skin.HasSetting(InvertTextColor)] | [String.IsEqual(Skin.String(PosterHighlight),Highlight) + !Skin.HasSetting(InvertTextColor)]">dialog_fg_100</value>
    </variable>
    <variable name="ColorSelected_70">
        <value condition="[[String.IsEqual(Skin.String(PosterHighlight),Mix) | String.IsEqual(Skin.String(PosterHighlight),White) | String.IsEmpty(Skin.String(PosterHighlight))] + !Skin.HasSetting(InvertTextColor)] | [String.IsEqual(Skin.String(PosterHighlight),Highlight) + Skin.HasSetting(InvertTextColor)]">main_bg_70</value>
        <value condition="[[String.IsEqual(Skin.String(PosterHighlight),Mix) | String.IsEqual(Skin.String(PosterHighlight),White)] + Skin.HasSetting(InvertTextColor)] | [String.IsEqual(Skin.String(PosterHighlight),Highlight) + !Skin.HasSetting(InvertTextColor)]">main_fg_70</value>
    </variable>
    <variable name="ColorFG_Highlight">
        <value condition="String.IsEqual(Skin.String(PosterHighlight),White) | String.IsEqual(Skin.String(PosterHighlight),Mix) | String.IsEmpty(Skin.String(PosterHighlight))">main_fg_100</value>
        <value condition="String.IsEqual(Skin.String(PosterHighlight),Highlight)">$VAR[ColorHighlight]</value>
    </variable>

    <!-- Overlay Color -->
    <variable name="ColorOverlay">
        <value condition="Skin.HasSetting(DisableOverlay)">7f000000</value>
        <value condition="Skin.HasSetting(TMDbHelper.EnableColors) + !String.IsEmpty(Window(home).Property(TMDbHelper.ListItem.Colors.Main))">$INFO[Window(home).Property(TMDbHelper.ListItem.Colors.Main)]</value>
        <value condition="!String.IsEmpty(Skin.String(overlaycolor.name))">$INFO[Skin.String(overlaycolor.name)]</value>
        <value>Highlight</value>
    </variable>

    <variable name="ColorHighlightOverlay">
        <value condition="String.IsEqual(Skin.String(PosterHighlight),White) | String.IsEmpty(Skin.String(PosterHighlight))">ffffffff</value>
        <value condition="String.IsEqual(Skin.String(PosterHighlight),Mix) | String.IsEqual(Skin.String(PosterHighlight),Highlight)">$VAR[ColorHighlight]</value>
    </variable>

    <!-- Watched / Progress Color -->
    <variable name="ColorWatchedProgress">
        <value condition="!String.IsEmpty(Skin.String(watchedprogresscolor.name))">$INFO[Skin.String(watchedprogresscolor.name)]</value>
        <value>WatchedProgress</value>
    </variable>

    <variable name="IconsColor_Var">
        <value condition="String.IsEmpty(Skin.String(Icons))">monochrome</value>
        <value>$INFO[Skin.String(Icons)]</value>
    </variable>

    <variable name="IconsDiffuse_Var">
        <value condition="String.IsEmpty(Skin.String(icons.diffuse))">main_fg_100</value>
        <value>$INFO[Skin.String(icons.diffuse)]</value>
    </variable>

    <variable name="IconsColorLabel_Var">
        <value condition="String.IsEmpty(Skin.String(icons.label))">Monochrome</value>
        <value>$INFO[Skin.String(icons.label)]</value>
    </variable>

    <variable name="PVRTimeRemainingMMVar">
        <value condition="Integer.IsEqual(PVR.EpgEventRemainingTime(mm),09)">9m</value>
        <value condition="Integer.IsEqual(PVR.EpgEventRemainingTime(mm),08)">8m</value>
        <value condition="Integer.IsEqual(PVR.EpgEventRemainingTime(mm),07)">7m</value>
        <value condition="Integer.IsEqual(PVR.EpgEventRemainingTime(mm),06)">6m</value>
        <value condition="Integer.IsEqual(PVR.EpgEventRemainingTime(mm),05)">5m</value>
        <value condition="Integer.IsEqual(PVR.EpgEventRemainingTime(mm),04)">4m</value>
        <value condition="Integer.IsEqual(PVR.EpgEventRemainingTime(mm),03)">3m</value>
        <value condition="Integer.IsEqual(PVR.EpgEventRemainingTime(mm),02)">2m</value>
        <value condition="Integer.IsEqual(PVR.EpgEventRemainingTime(mm),01)">1m</value>
    </variable>

    <variable name="PVRTimeRemainingVar">
        <value condition="Integer.IsGreater(PVR.EpgEventRemainingTime(h),0) + Integer.IsGreater(PVR.EpgEventRemainingTime(mm),9)">$INFO[PVR.EpgEventRemainingTime(h),,h]$INFO[PVR.EpgEventRemainingTime(mm),,m]</value>
        <value condition="Integer.IsGreater(PVR.EpgEventRemainingTime(h),0) + Integer.IsLessOrEqual(PVR.EpgEventRemainingTime(mm),9)">$INFO[PVR.EpgEventRemainingTime(h),,h]$VAR[PVRTimeRemainingMMVar]</value>
        <value condition="Integer.IsLessOrEqual(PVR.EpgEventRemainingTime(h),0) + Integer.IsGreater(PVR.EpgEventRemainingTime(mm),9)">$INFO[PVR.EpgEventRemainingTime(mm),,m]</value>
        <value condition="Integer.IsLessOrEqual(PVR.EpgEventRemainingTime(h),0) + Integer.IsLessOrEqual(PVR.EpgEventRemainingTime(mm),9)">$VAR[PVRTimeRemainingMMVar]</value>
        <value>$INFO[PVR.EpgEventRemainingTime(ss)]s</value>
    </variable>

    <variable name="VideoResolutionTypeVar">
        <value condition="String.IsEqual(ListItem.VideoResolution,480)">SD</value>
        <value condition="String.IsEqual(ListItem.VideoResolution,540)">SD</value>
        <value condition="String.IsEqual(ListItem.VideoResolution,576)">SD</value>
        <value condition="String.IsEqual(ListItem.VideoResolution,720)">HD</value>
        <value condition="String.IsEqual(ListItem.VideoResolution,1080)">HD</value>			
        <value condition="String.IsEqual(ListItem.VideoResolution,4K)">UHD</value>
        <value condition="String.IsEqual(ListItem.VideoResolution,8K)">UHD</value>	
    </variable>
    <variable name="VideoCodecVar">
        <value condition="String.IsEqual(ListItem.VideoCodec,av1)">AV1</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,avc1)">AVC-1</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,div3)">DivX</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,divx)">DivX</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,dx50)">DivX</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,flv)">FLV</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,h264)">H.264</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,hev1)">H.265</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,hevc)">H.265</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,hvc1)">H.265</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,mpeg1)">MPEG-1</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,mpeg2)">MPEG-2</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,mpeg2video)">MPEG-2</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,mp4v)">MPEG-4</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,mpeg4)">MPEG-4</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,theora)">Theora</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,vc1)">VC-1</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,vc-1)">VC-1</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,vp8)">VP8</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,vp9)">VP9</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,wmv)">WMV</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,wmv3)">WMV</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,wvc1)">VC-1</value>
        <value condition="String.IsEqual(ListItem.VideoCodec,xvid)">XviD</value>
        <value>$INFO[ListItem.VideoCodec]</value>
    </variable>
    <variable name="VideoHDRVar">
        <value condition="String.IsEqual(ListItem.HdrType,dolbyvision)">Dolby Vision</value>
        <value condition="String.IsEqual(ListItem.HdrType,hdr10)">HDR10</value>
        <value condition="String.IsEqual(ListItem.HdrType,hlg)">HLG</value>
        <value>$INFO[ListItem.HdrType]</value>
    </variable>
    <variable name="AudioCodecVar">
        <value condition="String.IsEqual(ListItem.AudioCodec,aac)">AAC</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,aac_latm)">AAC</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,ac3)">Dolby D</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,aif)">AIFF</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,aifc)">AIFF</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,aiff)">AIFF</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,alac)">ALAC</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,ape)">APE</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,avc)">AVC</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,cdda)">CDDA</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,dca)">DTS</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,dolbydigital)">Dolby D</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,dts)">DTS</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,dtshd_hra)">DTSHD-HRA</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,dtshd_ma)">DTSHD-MA</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,dtsma)">DTSHD-MA</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,eac3)">Dolby D+</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,flac)">FLAC</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,mp1)">MP1</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,mp3)">MP3</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,mp3float)">MP3</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,ogg)">OGG</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,opus)">OPUS</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,pcm)">PCM</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,pcm_bluray)">PCM</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,pcm_s16le)">PCM</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,pcm_s24le)">PCM</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,truehd)">TrueHD</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,vorbis)">Vorbis</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,wav)">WAV</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,wavpack)">WAVP</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,wmapro)">WMA-PRO</value>
        <value condition="String.IsEqual(ListItem.AudioCodec,wmav2)">WMA</value>
        <value>$INFO[ListItem.AudioCodec]</value>
    </variable>
    <variable name="AudioChannelsVar">
        <value condition="String.IsEqual(ListItem.AudioChannels,0)">0.0</value>
        <value condition="String.IsEqual(ListItem.AudioChannels,1)">1.0</value>
        <value condition="String.IsEqual(ListItem.AudioChannels,2)">2.0</value>
        <value condition="String.IsEqual(ListItem.AudioChannels,3)">2.1</value>
        <value condition="String.IsEqual(ListItem.AudioChannels,4)">4.0</value>
        <value condition="String.IsEqual(ListItem.AudioChannels,5)">4.1</value>
        <value condition="String.IsEqual(ListItem.AudioChannels,6)">5.1</value>
        <value condition="String.IsEqual(ListItem.AudioChannels,7)">6.1</value>
        <value condition="String.IsEqual(ListItem.AudioChannels,8)">7.1</value>
        <value condition="String.IsEqual(ListItem.AudioChannels,10)">9.1</value>
        <value>$INFO[ListItem.AudioChannels]</value>
    </variable>
    <variable name="MediaInfoListLabelVar">
        <value condition="Window.IsVisible(selectvideoversion)">$INFO[ListItem.VideoVersionName]</value>
        <value>$INFO[ListItem.Label]</value>
    </variable>
    <variable name="MediaInfoListLabel2Var">
        <value condition="ListItem.IsStereoscopic">$INFO[ListItem.Duration,$LOCALIZE[180]: ][CR]$VAR[VideoCodecVar,, ]$INFO[ListItem.VideoResolution,| , ]$VAR[VideoResolutionTypeVar,, ]$VAR[VideoHDRVar,| , ]| 3D $INFO[ListItem.VideoAspect,| ,:1 ]$VAR[AudioCodecVar,| , ]$VAR[AudioChannelsVar]</value>
        <value>$INFO[ListItem.Duration,$LOCALIZE[180]: ][CR]$VAR[VideoCodecVar,, ]$INFO[ListItem.VideoResolution,| , ]$VAR[VideoResolutionTypeVar,, ]$VAR[VideoHDRVar,| , ]$INFO[ListItem.VideoAspect,| ,:1 ]$VAR[AudioCodecVar,| , ]$VAR[AudioChannelsVar]</value>
    </variable>

    <include name="Dimensions_Fullscreen">
        <left>0</left>
        <top>0</top>
        <width>1920</width>
        <height>1080</height>
    </include>

    <include name="Dimensions_TrailerScreen">
        <top>-100</top>
        <right>-20</right>
        <width>1520</width>
        <height>925</height>
    </include>

    <include name="AutoCompletion">
        <content>plugin://plugin.program.autocompletion?info=autocomplete&amp;&amp;id=$INFO[Control.GetLabel(312).index(1)]&amp;&amp;limit=9</content>
    </include>
</includes>
